ASSIGNMENT NOTES :

1- Bu grup projesinin bu bölümü için, kaynak verilerin bir normalleştirilmiş veritabanına dönüştürülmesi adımlarını takip edeceksiniz. 
Bu, şimdiye kadar kapsanan birkaç konunun birleşimini temsil edecektir.  ✅
 
2- Veritabanınızda tutmak istediğiniz en az 30 veri öğesi kümesini oluşturmak için bir dizi gerçek bulma teknikleri (çoğunlukla araştırmaya dayalı) kullanacaksınız.  ✅
Örnek verilerin normalize edilmemiş bir veri kümesi oluşturmanız gerekecek.  ✅
Bu verileri tercih ettiğiniz bir teknolojiyi kullanarak (MySQL, Access, vb.) bir RDBS şemasındaki tek bir tabloya aktarın. ✅

3- Bunun ardından, sınıfta tartışılan normalizasyon sürecini kullanarak veritabanınız için 3NF'de bir E-R diyagramı oluşturacaksınız. 

4- 3NF veritabanında verilerinizi temsil etmek için gerekli tabloları oluşturun. 
Kaynak UNF tablosundan verileri almak ve uygun 3NF tablosuna koymak için gerekli sorguları kullanarak bu tabloları doldurun..

 DELIVERABLES :
1. Normalize edilmemiş bir veri kümesi, şunları içerir:
	saklanan veri öğelerinin bir listesi - a list of the data items being maintained
	bir ızgara veya elektronik tablo şeklinde bir veri kümesi - a set of data in a grid or spreadsheet
 	
2- 3NF veri tabanınız için E-R Diyagramı (katılım/öncelik bilgisini dahil edin...0..*, 1..1, vb.)
	 E-R Diagram for your 3NF database (include the participation/cardinality information...0..*, 1..1, etc.)
 	
3- Tablo oluşturmak ve UNF veritabanı tablosundan oluşturulan tablolara veri eklemek için SQL sorguları
 	SQL queries for creating tables and inserting data from the UNF database tableinto the tables created
    
4- A view to recreate the original dataset from your 3NF tables (this will be usedfor comparison purposes to the original dataset you provide as number 1 of thisdeliverable).
3NF tablolarınızdan orijinal veri setini yeniden oluşturmak için bir görünüm (bu, bu çıktının 1 numarası olarak sağladığınız orijinal veri setiyle karşılaştırma amacıyla kullanılacaktır)

ACCEPTABLE FORMATS :

Öğe 1, bir elektronik tablo olarak gönderilebilir. Öğe 2 diyagram olarak çizilmelidir. Öğe 3 ve 4 SQL sorguları olarak gönderilmelidir.
	Item 1 can be submitted as an spreadsheet.  Item 2 should be drawn as a diagram.Items 3 and 4 should be submitted as SQL queries.
Alternatif olarak, tüm öğeler bir Word veya pdf formatında rapor olarak sunulabilir.
	Alternatively, you can submit all items as a report in Word or pdf format.

===================================================================================================================================================
STRUCTURE:

STUDENTS TABLE

student_id SERIAL( PL/pgSQL ) PRIMARY KEY
student_first_name (Adı) VARCHAR NOT NULL	
student_last_name (Soyadı) VARCHAR NOT NULL	
student_gender (Cinsiyet) VARCHAR NOT NULL	
student_birth_date (Doğum tarihi) DATE NOT NULL	
student_address (Adres) VARCHAR NOT NULL	
student_email (E-posta) VARCHAR 
student_phone (Telefon numarası) VARCHAR NOT NULL	
student_enrollment_date (Kayıt tarihi) DATE
department_id (Bölüm numarası) FOREIGN KEY INT REF DEPARTMENT TABLE
----------------------------------------------
DEPARTMENTS TABLE

department_id  SERIAL( PL/pgSQL ) PRIMARY KEY
department_name VARCHAR NOT NULL	
faculty_id FOREIGN KEY INT REF FACULTY TABLE
-----------------------------------------------
FACULTIES TABLE

faculty_id  SERIAL( PL/pgSQL ) PRIMARY KEY
faculty_name VARCHAR NOT NULL	
-----------------------------------------------

COURSES TABLE

course_id  SERIAL( PL/pgSQL ) PRIMARY KEY
course_code VARCHAR NOT NULL	
course_name VARCHAR NOT NULL	
course_description VARCHAR 
course_credit  INT NOT NULL	
course_hours VARCHAR NOT NULL	
department_id FOREIGN KEY INT REF DEPARTMENT TABLE
-----------------------------------------------

STUDENT_COURSES TABLE

student_course_id  SERIAL( PL/pgSQL ) PRIMARY KEY
student_id FOREIGN KEY INT REF STUDENT TABLE
course_id FOREIGN KEY INT REF COURSE TABLE
semester  VARCHAR NOT NULL	
year  INT NOT NULL
-----------------------------------------------

INSTRUCTORS TABLE

instructor_id  SERIAL( PL/pgSQL ) PRIMARY KEY
instructor_first_name VARCHAR NOT NULL	
instructor_last_name VARCHAR NOT NULL	
instructor_birth_date DATE
instructor_gender VARCHAR NOT NULL	
instructor_email VARCHAR NOT NULL	
instructor_phone VARCHAR NOT NULL	
department_id FOREIGN KEY INT REF DEPARTMENT TABLE
-----------------------------------------------

INSTRUCTORS_COURSES TABLE

instructor_courses_id  SERIAL( PL/pgSQL ) PRIMARY KEY
course_id FOREIGN KEY INT REF COURSE TABLE
instructor_id FOREIGN KEY INT REF INSTRUCTOR TABLE
-----------------------------------------------

COURSE_SCHEDULE TABLE
course_schedule_id  SERIAL( PL/pgSQL ) PRIMARY KEY
course_id FOREIGN KEY INT REF COURSE TABLE
instructor_id FOREIGN KEY INT REF INSTRUCTOR TABLE
room  VARCHAR NOT NULL
day_of_week VARCHAR NOT NULL
start_time DATE NOT NULL
end_time DATE NOT NULL
-----------------------------------------------

EVENTS TABLE

event_id  SERIAL( PL/pgSQL ) PRIMARY KEY
event_title VARCHAR NOT NULL
event_description  VARCHAR
event_date DATE NOT NULL
event_location VARCHAR NOT NULL
-----------------------------------------------

GRADES TABLE

grade_id  SERIAL( PL/pgSQL ) PRIMARY KEY
student_id FOREIGN KEY INT REF STUDENT TABLE
course_id FOREIGN KEY INT REF COURSE TABLE
midterm_grade INT 
final_grade INT 
average_grade INT 
-----------------------------------------------
TOTAL 56 COLUMN

===================================================================================================================================================

1- FACULTIES TABLE

CREATE TABLE faculties (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50)
);

2- DEPARTMENTS TABLE

CREATE TABLE departments (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50),
    faculty_id INT
    ADD FOREIGN KEY (faculty_id) REFERENCES faculties(id);

);

3- STUDENTS TABLE

CREATE TABLE students (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    gender CHAR(1),
    birth_date DATE,
    address VARCHAR(255),
    email VARCHAR(100),
    phone VARCHAR(20),
    enrollment_date DATE,
    department_id INT REFERENCES departments(id)
);

4- COURSES TABLE

CREATE TABLE courses (
    id SERIAL PRIMARY KEY,
    code VARCHAR(20),
    name VARCHAR(50),
    description TEXT,
    credit INT,
    hours INT,
    department_id INT REFERENCES departments(id)
);

5- INSTRUCTORS TABLE

CREATE TABLE instructors (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    birth_date DATE,
    gender CHAR(1),
    email VARCHAR(100),
    phone VARCHAR(20),
    department_id INT REFERENCES departments(id)
);

6- COURSE SCHEDULE TABLE

CREATE TABLE course_schedule (
    id SERIAL PRIMARY KEY,
    course_id INT,
    instructor_id INT,
    room VARCHAR(20),
    day_of_week INT,
    start_time TIME,
    end_time TIME,
    FOREIGN KEY (course_id) REFERENCES courses(id),
    FOREIGN KEY (instructor_id) REFERENCES instructors(id)
);

7- GRADES TABLE

CREATE TABLE grades (
    student_id INT,
    course_id INT,
    midterm_grade INT,
    final_grade INT,
    average_grade INT,
    FOREIGN KEY (student_id) REFERENCES students(id),
    FOREIGN KEY (course_id) REFERENCES courses(id)
);

8- STUDENT_COURSES TABLE

CREATE TABLE student_courses (
    student_id INT,
    course_id INT,
    semester INT,
    year INT,
    FOREIGN KEY (student_id) REFERENCES students(id),
    FOREIGN KEY (course_id) REFERENCES courses(id)
);

9- COURSE_INSTRUCTORS TABLE

CREATE TABLE course_instructors (
    course_id INT,
    instructor_id INT,
    PRIMARY KEY (course_id, instructor_id),
    FOREIGN KEY (course_id) REFERENCES courses(id),
    FOREIGN KEY (instructor_id) REFERENCES instructors(id)
);

10- EVENTS TABLE

CREATE TABLE events (
    id SERIAL PRIMARY KEY,
    title VARCHAR(255),
    description TEXT,
    event_date DATE,
    location VARCHAR(255)
);



